class Solution{
{
    public:
	int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int N)
	{
	    int i = TargetPos[0]-1;
	    int j = TargetPos[1]-1;
	    int n = N;
	    queue<pair<int,int>>q;
	    q.push({i,j});
	    vector<vector<int>> ans(n,vector<int>(n,INT_MAX));
	    ans[i][j]=0;
	    
	    while(!q.empty())
	    {
	        int x = q.front().first;
	        int y = q.front().second;
	        
	        q.pop();
	        
	        if(x+1<n&&y+2<n&&ans[x+1][y+2]>1+ans[x][y])
	        {
	            ans[x+1][y+2]=1+ans[x][y];
	            q.push({x+1,y+2});
	        }
	         
	        if(x+1<n&&y-2>=0&&ans[x+1][y-2]>1+ans[x][y])
	        {
	            ans[x+1][y-2]=1+ans[x][y];
	            q.push({x+1,y-2});
	        }
	        
	         
	        if(x-1>=0&&y-2>=0&&ans[x-1][y-2]>1+ans[x][y])
	        {
	            ans[x-1][y-2]=1+ans[x][y];
	            q.push({x-1,y-2});
	        }
	        
	           
	        if(x-1>=0&&y+2<n&&ans[x-1][y+2]>1+ans[x][y])
	        {
	            ans[x-1][y+2]=1+ans[x][y];
	            q.push({x-1,y+2});
	        }
	        
	        if(y+1<n&&x+2<n&&ans[x+2][y+1]>1+ans[x][y])
	        {
	            ans[x+2][y+1]=1+ans[x][y];
	            q.push({x+2,y+1});
	        }
	          if(y+1<n&&x-2>=0&&ans[x-2][y+1]>1+ans[x][y])
	        {
	            ans[x-2][y+1]=1+ans[x][y];
	            q.push({x-2,y+1});
	        }
	           if(y-1>=0&&x-2>=0&&ans[x-2][y-1]>1+ans[x][y])
	        {
	            ans[x-2][y-1]=1+ans[x][y];
	            q.push({x-2,y-1});
	        }
	            if(y-1>=0&&x+2<n&&ans[x+2][y-1]>1+ans[x][y])
	        {
	            ans[x+2][y-1]=1+ans[x][y];
	            q.push({x+2,y-1});
	        }
	    }
	    int a = KnightPos[0]-1;
	    int b = KnightPos[1]-1;
	    if(ans[a][b]==INT_MAX) return -1;
	    else return ans[a][b];
	}
}:
//Link : https://practice.geeksforgeeks.org/problems/steps-by-knight5927/1
